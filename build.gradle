plugins {
    id 'jacoco'
    id 'org.jetbrains.intellij' version '0.2.16'
    id 'de.undercouch.download' version '3.2.0'
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id 'org.jetbrains.kotlin.jvm' version '1.1.4-2'
}

apply plugin: 'org.jetbrains.intellij'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'

sourceCompatibility = javaVersion
targetCompatibility = javaTargetVersion

group pluginGroup
version = pluginVersion

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

sourceSets {
    main {
        java.srcDirs 'src', 'gen'
        kotlin.srcDirs 'src'
        resources.srcDir 'resources'
    }
    test {
        java.srcDir 'tests'
        resources.srcDir 'testData'
    }
}

intellij {
    version System.getenv().getOrDefault('IDEA_VERSION', ideaVersion)
    type ideaType
    pluginName pluginName
    downloadSources Boolean.valueOf(sources)
    sameSinceUntilBuild Boolean.valueOf(isEAP)
    alternativeIdePath idePath
    updateSinceUntilBuild false

    plugins 'git4idea'

    publishPlugin {
        username publishUsername
        password publishPassword
        channels publishChannel
    }
}

idea {
    project {
        jdkName         = javaVersion
        languageLevel   = javaVersion
    }

    module {
        generatedSourceDirs += file('gen')
    }
}

checkstyle {
    configFile = new File(rootDir, "gradle/checkstyle.xml")
}

// Configurations

configurations {
    bnf
    jflex
}

repositories {
    mavenCentral()
    maven { url 'https://dl.bintray.com/jetbrains/intellij-plugin-service' }
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

dependencies {
    bnf files("$buildDir/tools/GrammarKit/lib/grammar-kit.jar")
    bnf files("$buildDir/tools/light-psi-all.jar")
    jflex files("$buildDir/tools/JFlex.jar")

    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-runtime', version: kotlinVersion
    compile group: 'com.google.dagger', name: 'dagger', version: '2.11'
    kapt group: 'com.google.dagger', name: 'dagger-compiler', version: '2.11'

    testCompile group: 'junit', name: 'junit', version: '4.11'
}


import de.undercouch.gradle.tasks.download.Download
import groovy.io.FileType
// Tasks

task downloadJFlexJar(type: Download) {
    description 'Downloads JFlex.'

    src 'https://github.com/JetBrains/intellij-community/raw/master/tools/lexer/jflex-1.7.0-SNAPSHOT.jar'
    dest "$buildDir/tools/JFlex.jar"
    onlyIf { !file("$buildDir/tools/JFlex.jar").exists() }
}

task downloadJFlexSkeleton(type: Download) {
    description 'Downloads JFlex skeleton.'

    src 'https://raw.github.com/JetBrains/intellij-community/master/tools/lexer/idea-flex.skeleton'
    dest "$buildDir/tools/idea-flex.skeleton"
    onlyIf { !file("$buildDir/tools/idea-flex.skeleton").exists() }
}

task generateLexer(type: JavaExec) {
    description 'Generates lexer sources with JFlex.'
    dependsOn downloadJFlexJar, downloadJFlexSkeleton

    main = 'jflex.Main'
    args = [
            '-skel',
            "$buildDir/tools/idea-flex.skeleton",
            '-d',
            'gen/mobi/hsz/idea/gitignore/lexer/',
            'src/mobi/hsz/idea/gitignore/lexer/Ignore.flex',
    ]

    classpath = configurations.jflex
}

task downloadGrammarKit(type: Download) {
    description 'Downloads GrammarKit.'

    src 'https://github.com/JetBrains/Grammar-Kit/releases/download/1.2.0.1/GrammarKit.zip'
    dest "$buildDir/tools/GrammarKit.zip"
    onlyIfNewer true
}

task downloadGrammarLightPsi(type: Download) {
    description 'Downloads GrammarKit Light Psi.'

    src 'https://github.com/JetBrains/Grammar-Kit/releases/download/1.2.0.1/light-psi-all.jar'
    dest "$buildDir/tools/light-psi-all.jar"
    onlyIfNewer true
}

task unzipGrammarKit(type: Copy) {
    description 'Extracts GrammarKit files.'
    dependsOn downloadGrammarKit

    from zipTree("$buildDir/tools/GrammarKit.zip")
    into "${buildDir}/tools/"
    include "GrammarKit/lib/*"
}

task generateParser(type: JavaExec) {
    description 'Generates parser sources with GrammarKit.'
    dependsOn unzipGrammarKit, downloadGrammarLightPsi

    main = 'org.intellij.grammar.Main'
    args = [ 'gen', file('resources/bnf/Ignore.bnf').absolutePath ]

    classpath = configurations.bnf + configurations.compile
}

task pullResources(type: Exec) {
    description 'Pulls gitignore resources from GIT.'

    workingDir 'resources/gitignore'
    commandLine 'git', 'pull', 'origin', 'master'
}

task generateTemplatesList() {
    description 'Generates templates list based on the gitignore submodule.'
    dependsOn pullResources

    def content = "";
    file('resources/gitignore').eachFileRecurse (FileType.FILES) { file ->
        if (file.name.endsWith(".gitignore")) {
            content += relativePath(file).substring(10) + "\n"
        }
    }
    file('resources/templates.list').write(content)
}

task generateSources() {
    if (Boolean.valueOf(runGenerators)) {
        dependsOn generateParser, generateLexer, generateTemplatesList
    }
}

clean.doFirst {
    delete 'gen', 'out'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'

    if (!Boolean.valueOf(System.getenv('CI'))) {
        def javaHome = System.getenv("JAVA_HOME")
        if (null == javaHome || "".equals(javaHome)) {
            javaHome = JDK6_HOME
        }

        options.bootClasspath = "$javaHome/jre/lib/rt.jar"
    }
}

afterEvaluate {
    tasks.getByName('runIde') {
        jvmArgs(javaArguments)
    }
}

compileKotlin.dependsOn generateSources
